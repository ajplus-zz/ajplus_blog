import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-34010d88.js";const t={},p=e(`<h3 id="this与super" tabindex="-1"><a class="header-anchor" href="#this与super" aria-hidden="true">#</a> this与super</h3><ul><li><p><code>this</code>修饰的变量用于指代成员变量，其主要作用：解决局部变量和成员变量的重名问题；</p></li><li><p>在子类中需要访问父类中非私有成员变量时，使用<code>super</code> 关键字，修饰父类成员变量，类似于 <code>this</code> ；</p></li></ul><p>在类的继承中，子类的构造方法中默认会有<code>super()</code>语句存在，相当于执行父类的相应构造方法中的语句；</p><h3 id="static" tabindex="-1"><a class="header-anchor" href="#static" aria-hidden="true">#</a> static</h3><p>好处：提高效率与易用性，无需实例即可调用，特别适合无状态逻辑处理；</p><ul><li><p><strong>静态变量</strong>：应用于所有实例共享的共性数据，例如银行账户余额，统一管理，不依附于任何单一实例；</p></li><li><p><strong>静态方法</strong>：无需创建对象即可调用，适用于无状态操作，例如生成随机数、日期转换等工具功能；</p></li><li><p><strong>静态代码块</strong>：在类初次加载时执行，适合进行一次性初始化或配置操作，比如数据库连接初始化；</p></li></ul><p>注意：静态方法属于类层次，java 虚拟机（JVM）会在类首次被加载时初始化静态方法所在的类（包括执行静态初始化块等），此后，每次调用该静态方法时，JVM 直接执行该方法的代码，而无需再次初始化或创建该方法的实例；</p><h3 id="final" tabindex="-1"><a class="header-anchor" href="#final" aria-hidden="true">#</a> final</h3><p>不可改变，最终的含义；可以用于修饰类、方法和变量；</p><ul><li>类：被修饰的类，不能被继承；</li><li>方法：被修饰的方法，不能被重写；</li><li>变量：被修饰的变量，能且仅能被赋值一次；</li></ul><p>补充：当标记一个字段为<code>final</code>并提供一个对应的构造函数时，<code>Spring</code>能够识别出这个需求，并在创建<code>Bean</code>实例时，通过构造函数自动注入相应的依赖；这是依赖注入框架设计的一部分，旨在支持和鼓励 <code>immutability</code> 和更好的设计原则；</p><p>代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NameDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">NameDao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">outName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; --- ajplus!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JobServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">JobService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">NameDao</span> nameDao<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nameDao<span class="token punctuation">.</span><span class="token function">outName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),o=[p];function i(c,l){return s(),a("div",null,o)}const r=n(t,[["render",i],["__file","ch2.html.vue"]]);export{r as default};
