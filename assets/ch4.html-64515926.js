const e=JSON.parse('{"key":"v-3c5ffa1a","path":"/code_note/java/01_base/ch4.html","title":"4）泛型","lang":"zh-CN","frontmatter":{"icon":"markdown","title":"4）泛型","category":["java"],"tag":["basic"],"description":"泛型，就是类型的参数化，类型不再固定，而是根据使用时传入的类的类型而定； 泛型统一并约束类型，提升代码复用性和安全性；在编译时才进行类型检查，即提前发现类型转换错误，又消除强制类型转换，代码更简洁安全； 泛型未明确指定时，默认为Object类型；不支持基本类型，需使用包装类；接受类型及其子类，增强灵活性； 泛型的标识可以是任意字母，但是为了规范，行业内有默认的规则： T：代表通用类型，常用作首个泛型参数，表示任意类型； S, U, V：当需要额外的泛型类型参数时，依次使用这些字母，以支持多类型参数的需求； E：特指集合（Collection）中的元素类型（Element），适用于定义集合类的泛型； K, V：在映射（Map）类型中，分别代表键（Key）和值（Value）的泛型类型； N：较少见，有时用于表示数值类型（Number）的泛型约束；","head":[["meta",{"property":"og:url","content":"https://ajplus.cn/code_note/java/01_base/ch4.html"}],["meta",{"property":"og:title","content":"4）泛型"}],["meta",{"property":"og:description","content":"泛型，就是类型的参数化，类型不再固定，而是根据使用时传入的类的类型而定； 泛型统一并约束类型，提升代码复用性和安全性；在编译时才进行类型检查，即提前发现类型转换错误，又消除强制类型转换，代码更简洁安全； 泛型未明确指定时，默认为Object类型；不支持基本类型，需使用包装类；接受类型及其子类，增强灵活性； 泛型的标识可以是任意字母，但是为了规范，行业内有默认的规则： T：代表通用类型，常用作首个泛型参数，表示任意类型； S, U, V：当需要额外的泛型类型参数时，依次使用这些字母，以支持多类型参数的需求； E：特指集合（Collection）中的元素类型（Element），适用于定义集合类的泛型； K, V：在映射（Map）类型中，分别代表键（Key）和值（Value）的泛型类型； N：较少见，有时用于表示数值类型（Number）的泛型约束；"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"ajplus"}],["meta",{"property":"article:tag","content":"basic"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4）泛型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ajplus\\",\\"url\\":\\"https://github.com/ajplus-zz/\\",\\"email\\":\\"ajplusdd@gmail.com\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":2.16,"words":649},"filePathRelative":"code_note/java/01_base/ch4.md","excerpt":"<p>泛型，就是类型的参数化，类型不再固定，而是根据使用时传入的类的类型而定；</p>\\n<p>泛型统一并约束类型，提升代码复用性和安全性；在编译时才进行类型检查，即提前发现类型转换错误，又消除强制类型转换，代码更简洁安全；</p>\\n<p>泛型未明确指定时，默认为Object类型；不支持基本类型，需使用包装类；接受类型及其子类，增强灵活性；</p>\\n<p>泛型的标识可以是任意字母，但是为了规范，行业内有默认的规则：</p>\\n<ul>\\n<li><code>T</code>：代表通用类型，常用作首个泛型参数，表示任意类型；</li>\\n<li><code>S</code>, <code>U</code>, <code>V</code>：当需要额外的泛型类型参数时，依次使用这些字母，以支持多类型参数的需求；</li>\\n<li><code>E</code>：特指集合（<code>Collection</code>）中的元素类型（<code>Element</code>），适用于定义集合类的泛型；</li>\\n<li><code>K</code>, <code>V</code>：在映射（<code>Map</code>）类型中，分别代表键（<code>Key</code>）和值（<code>Value</code>）的泛型类型；</li>\\n<li><code>N</code>：较少见，有时用于表示数值类型（<code>Number</code>）的泛型约束；</li>\\n</ul>","autoDesc":true}');export{e as data};
