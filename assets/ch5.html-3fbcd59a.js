import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c,d as s}from"./app-34010d88.js";const n={},o=s(`<p>我们把没有方法体的方法称为抽象方法；java语法规定，包含抽象方法的类就是抽象类；</p><p>抽象方法定义格式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>修饰符 <span class="token keyword">abstract</span> 返回值类型 方法名 <span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span>；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>抽象类通常用来为一组相关或相似类定义通用属性和行为，这些类之间存在着<code>is-a</code>关系，它允许部分实现并为子类提供默认行为；</p><p>接口主要用于定义规范或契约，多个无关类可以实现同一个接口来表明它们都支持某种功能或服务，体现<code>has-a-role</code>或者<code>can-do</code>关系；</p><p>抽象类的应用场景：</p><ul><li>定义层次结构复杂的类体系时，例如组件框架中的基础组件；</li><li>提供通用代码的同时允许子类进行扩展，适用于需要共享一部分实现的情况；</li></ul><p>接口的应用场景：</p><ul><li>当希望不同类之间共享一组方法签名而不需要任何共同的实现时，例如多种数据源都可以实现一个名为<code>DataAccess</code>的接口以保证统一的数据访问方式；</li><li>实现多重继承功能，在java中由于不支持多继承，因此通过实现多个接口可以达到类似的效果；</li><li>定义跨模块、跨层级的规范，方便不同团队基于同一标准开发各自的组件；</li></ul>`,9),l=[o];function t(i,d){return e(),c("div",null,l)}const u=a(n,[["render",t],["__file","ch5.html.vue"]]);export{u as default};
