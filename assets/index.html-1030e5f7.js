const t=JSON.parse('{"key":"v-c7b57d2a","path":"/postgraduate/DS_SF/02_list/","title":"线性表","lang":"zh-CN","frontmatter":{"title":"线性表","icon":null,"category":["数据结构"],"tag":["线性表"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"线性表是由一系列数据元素构成的有限序列；在这些数据元素中，每一个元素都有一个明确的前驱和一个后继（除了首尾元素）； Ⓜ️ 特点： 一对一的关系：线性表中的元素之间是一对一的关系，每个元素仅有一个前驱和一个后继，形成线性序列； 顺序性：线性表中的元素是按照一定的顺序排列的，这个顺序是固定的，可以通过索引来访问； 简洁性：线性表的结构简单，仅需要存储数据元素以及维护它们之间的前驱和后继关系； 操作方便：由于线性表的结构简单直观，它便于进行插入、删除、查找等操作； 存储灵活：线性表可以采用多种方式存储，如顺序存储结构（数组）和链式存储结构（链表），还可以扩展出栈、队列等特殊线性表形式； 高效访问：在顺序存储的情况下，线性表可以实现高效的随机访问，即直接通过索引快速访问任何一个元素；","head":[["meta",{"property":"og:url","content":"https://ajplus.cn/postgraduate/DS_SF/02_list/"}],["meta",{"property":"og:title","content":"线性表"}],["meta",{"property":"og:description","content":"线性表是由一系列数据元素构成的有限序列；在这些数据元素中，每一个元素都有一个明确的前驱和一个后继（除了首尾元素）； Ⓜ️ 特点： 一对一的关系：线性表中的元素之间是一对一的关系，每个元素仅有一个前驱和一个后继，形成线性序列； 顺序性：线性表中的元素是按照一定的顺序排列的，这个顺序是固定的，可以通过索引来访问； 简洁性：线性表的结构简单，仅需要存储数据元素以及维护它们之间的前驱和后继关系； 操作方便：由于线性表的结构简单直观，它便于进行插入、删除、查找等操作； 存储灵活：线性表可以采用多种方式存储，如顺序存储结构（数组）和链式存储结构（链表），还可以扩展出栈、队列等特殊线性表形式； 高效访问：在顺序存储的情况下，线性表可以实现高效的随机访问，即直接通过索引快速访问任何一个元素；"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"ajplus"}],["meta",{"property":"article:tag","content":"线性表"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线性表\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ajplus\\",\\"url\\":\\"https://github.com/ajplus-zz/\\",\\"email\\":\\"ajplusdd@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"顺序表","slug":"顺序表","link":"#顺序表","children":[{"level":3,"title":"算法题","slug":"算法题","link":"#算法题","children":[]}]},{"level":2,"title":"链表","slug":"链表","link":"#链表","children":[{"level":3,"title":"单链表","slug":"单链表","link":"#单链表","children":[]},{"level":3,"title":"双链表","slug":"双链表","link":"#双链表","children":[]},{"level":3,"title":"循环链表","slug":"循环链表","link":"#循环链表","children":[]},{"level":3,"title":"静态链表","slug":"静态链表","link":"#静态链表","children":[]},{"level":3,"title":"算法题","slug":"算法题-1","link":"#算法题-1","children":[]}]}],"git":{},"readingTime":{"minutes":4.82,"words":1446},"filePathRelative":"postgraduate/DS_SF/02_list/README.md","excerpt":"<p>线性表是由一系列数据元素构成的有限序列；在这些数据元素中，每一个元素都有一个明确的前驱和一个后继（除了首尾元素）；</p>\\n<figure><figcaption>Ⓜ️</figcaption></figure>\\n<p>特点：</p>\\n<ul>\\n<li>\\n<p>一对一的关系：线性表中的元素之间是一对一的关系，每个元素仅有一个前驱和一个后继，形成线性序列；</p>\\n</li>\\n<li>\\n<p>顺序性：线性表中的元素是按照一定的顺序排列的，这个顺序是固定的，可以通过索引来访问；</p>\\n</li>\\n<li>\\n<p>简洁性：线性表的结构简单，仅需要存储数据元素以及维护它们之间的前驱和后继关系；</p>\\n</li>\\n<li>\\n<p>操作方便：由于线性表的结构简单直观，它便于进行插入、删除、查找等操作；</p>\\n</li>\\n<li>\\n<p>存储灵活：线性表可以采用多种方式存储，如顺序存储结构（数组）和链式存储结构（链表），还可以扩展出栈、队列等特殊线性表形式；</p>\\n</li>\\n<li>\\n<p>高效访问：在顺序存储的情况下，线性表可以实现高效的随机访问，即直接通过索引快速访问任何一个元素；</p>\\n</li>\\n</ul>","autoDesc":true}');export{t as data};
