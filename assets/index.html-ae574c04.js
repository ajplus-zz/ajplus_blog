import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,d as t}from"./app-34010d88.js";const e={},p=t(`<h3 id="_1-逻辑结构" tabindex="-1"><a class="header-anchor" href="#_1-逻辑结构" aria-hidden="true">#</a> 1. 逻辑结构</h3><ul><li>集合结构：数据元素构成了一个无序且无重复元素的集体；各个数据元素同属于一个集合，但它们之间不存在任何直接关系；</li><li>线性结构（又称线性表）：数据元素按照某种线性顺序进行排列，形成一对一的关系链；除首尾元素外，每个数据元素都有一个唯一的前驱和后继；</li><li>树形结构：在树形结构中，数据元素组织成一种层次关系，表现为一对多的父子关系；每一个数据元素（称为节点）可能有零个、一个或多个子节点；除根节点外，每个节点都恰好有一个父节点；</li><li>图形结构：图形结构的数据元素间形成了一个多对多的关系网，任意两个元素之间都可以存在直接联系；在这种结构中，任意节点可以拥有任意数量的邻接节点，体现了复杂系统中各元素之间的多重并行关联特性；</li></ul><figure><img src="https://manufactory.ajplus.cn/blog/数据结构/逻辑结构.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><br><h3 id="_2-物理结构" tabindex="-1"><a class="header-anchor" href="#_2-物理结构" aria-hidden="true">#</a> 2. 物理结构</h3><table><thead><tr><th style="text-align:left;">物理结构</th><th style="text-align:center;">特征</th><th style="text-align:center;">优点</th><th style="text-align:center;">缺点</th></tr></thead><tbody><tr><td style="text-align:left;">顺序存储</td><td style="text-align:center;">一段连续的内存空间</td><td style="text-align:center;">随机访问</td><td style="text-align:center;">插入、删除效率低，大小固定</td></tr><tr><td style="text-align:left;">链式存储</td><td style="text-align:center;">不连续的内存空间</td><td style="text-align:center;">大小动态扩展，插入、删除效率高</td><td style="text-align:center;">不能随机访问</td></tr><tr><td style="text-align:left;">索引存储</td><td style="text-align:center;">整体无序，索引块间有序</td><td style="text-align:center;">是对顺序表的改进，查找效率高</td><td style="text-align:center;">需额外空间存储索引表</td></tr><tr><td style="text-align:left;">散列存储</td><td style="text-align:center;">数据元素存储位置与散列值存在对应关系</td><td style="text-align:center;">查找位置基于数据本身，查找存储效率高</td><td style="text-align:center;">存储随机，不便于顺序查找</td></tr></tbody></table><br><h3 id="_3-时间复杂度" tabindex="-1"><a class="header-anchor" href="#_3-时间复杂度" aria-hidden="true">#</a> 3. 时间复杂度</h3><p>算法的时间复杂度记为：<code>T(n) = O(f(n))</code>；</p><br><p>a)加法规则</p><div class="language-mathematica line-numbers-mode" data-ext="mathematica"><pre class="language-mathematica"><code>T<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> T1<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> T2<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> O<span class="token punctuation">(</span>f<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> O<span class="token punctuation">(</span>g<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> O<span class="token punctuation">(</span>max<span class="token punctuation">(</span>f<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><p>b)乘法规则</p><div class="language-mathematica line-numbers-mode" data-ext="mathematica"><pre class="language-mathematica"><code>T<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> T1<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">*</span> T2<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> O<span class="token punctuation">(</span>f<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> O<span class="token punctuation">(</span>g<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> O<span class="token punctuation">(</span>f<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">*</span> g<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><p>c)常见时间复杂度</p><div class="language-mathematica line-numbers-mode" data-ext="mathematica"><pre class="language-mathematica"><code>O<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> O<span class="token punctuation">(</span>log₂n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> O<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> O<span class="token punctuation">(</span>nlog₂n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> O<span class="token punctuation">(</span>n²<span class="token punctuation">)</span> <span class="token operator">&lt;</span> O<span class="token punctuation">(</span>n³<span class="token punctuation">)</span> <span class="token operator">&lt;</span> O<span class="token punctuation">(</span><span class="token number">2</span>ⁿ<span class="token punctuation">)</span> <span class="token operator">&lt;</span> O<span class="token punctuation">(</span>n!<span class="token punctuation">)</span> <span class="token operator">&lt;</span> O<span class="token punctuation">(</span>nⁿ<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><p>例：下列程序段的时间复杂度是<code>O(n)</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token operator">++</span>sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_4-空间复杂度" tabindex="-1"><a class="header-anchor" href="#_4-空间复杂度" aria-hidden="true">#</a> 4. 空间复杂度</h3><p>算法的时间复杂度记为：<code>S(n) = O(g(n))</code>；</p><p>算法原地工作是指算法所需辅助空间为常量，即<code>O(1)</code>；</p><br><p>例：下列程序段的空间复杂度是<code>O(2ⁿ)</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">long</span> <span class="token function">getFib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">getFib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getFib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),o=[p];function c(l,i){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","index.html.vue"]]);export{d as default};
