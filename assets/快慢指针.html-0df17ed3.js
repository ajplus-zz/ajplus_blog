import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as t,f as p,b as n,e as s,d as o}from"./app-34010d88.js";const c={},l=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"提示"),n("p",null,[s("快慢指针是算法中的一种技巧，主要用于处理链表相关的问题。所谓的快慢指针，就是设置两个指针，一个快指针（fast），一个慢指针（slow），它们都从链表的起始位置开始移动。快指针每次移动的步长是慢指针的两倍。通过快慢指针的移动，可以高效地解决链表中的某些问题，比如判断链表是否有环、寻找链表的中点或者倒数第k个元素等。"),n("br"),s(" 快慢指针的应用")])],-1),i=o(`<hr><h3 id="_1-判断链表是否有环" tabindex="-1"><a class="header-anchor" href="#_1-判断链表是否有环" aria-hidden="true">#</a> 1. 判断链表是否有环</h3><p>当链表有环时，快慢指针最终会在环内相遇。这是因为快指针每次移动两步，慢指针每次移动一步，如果链表有环，快指针最终会追上慢指针。反之，如果链表无环，快指针最终会到达链表的末尾（遇到null指针）。</p><figure><img src="http://manufactory.ajplus.cn/blog/算法/快慢指针.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><br><div class="hint-container tip"><p class="hint-container-title">提示</p><p>分别定义<code>快指针p</code>、<code>慢指针q</code>，初始时两指针均指定链表首结点；快指针每次移动两个结点，慢指针每次移动一个结点；</p></div><br><ol><li>若链表有环则指针 p、q 一定会相遇（来源数学龟兔赛跑问题），否则快指针为空时返回<code>nullptr</code>；</li></ol><br><ol start="2"><li>当p、q 第一次相遇时，假设其相遇于结点<code>I</code>，设结点I距离入口结点<code>G</code>的距离为 d，则此时快指针p移动了 <code>2x = a + d + mR</code> (m为整数)、慢指针q移动了 <code>x = a + d + nR</code> (n为整数)；</li></ol><br><ol start="3"><li>易得 <code>a + d = (m - 2n)R</code>；</li></ol><br><ol start="4"><li>此时将<code>快指针p</code>重新指向链表首结点，让 p、q <strong>同速运动</strong>，则当p再次移动a距离后，p指针移动的距离为 a ，q指针移动的距离为 <code>a + d + nR + a = a + (m - n)R = a + kR </code>(k为整数)；易知此时 p、q 重新相遇且相遇结点即为链表环入口结点；</li></ol><br><p>代码实现：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>ListNode <span class="token operator">*</span><span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//先判空</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> nullptr <span class="token operator">||</span> head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> nullptr<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    ListNode <span class="token operator">*</span><span class="token function">p</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">q</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> nullptr <span class="token operator">||</span> p<span class="token operator">-&gt;</span>next <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> nullptr<span class="token punctuation">;</span> <span class="token comment">// 没有循环</span>
        <span class="token punctuation">}</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        q <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 找到循环，将快指针p移到头节点</span>
    p <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        q <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// p和q现在相遇于环的入口</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-寻找链表中点" tabindex="-1"><a class="header-anchor" href="#_2-寻找链表中点" aria-hidden="true">#</a> 2. 寻找链表中点</h3><p>要寻找链表的中点，可以让快慢指针同时从链表头部开始移动，快指针每次移动两步，慢指针每次移动一步。当快指针到达链表末尾时，慢指针将正好位于链表的中点。</p><h3 id="_3-寻找链表倒数第k个元素" tabindex="-1"><a class="header-anchor" href="#_3-寻找链表倒数第k个元素" aria-hidden="true">#</a> 3. 寻找链表倒数第k个元素</h3><p>寻找链表倒数第k个元素时，首先让快指针领先慢指针k-1步，然后快慢指针同时移动。当快指针到达链表末尾时，慢指针将指向链表的倒数第k个元素。</p>`,21);function r(d,u){return e(),t("div",null,[l,p(" more "),i])}const m=a(c,[["render",r],["__file","快慢指针.html.vue"]]);export{m as default};
